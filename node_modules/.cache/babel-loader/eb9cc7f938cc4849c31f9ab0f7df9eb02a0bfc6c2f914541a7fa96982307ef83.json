{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-box\"\n};\nconst _hoisted_3 = {\n  class: \"chat-history\"\n};\nconst _hoisted_4 = {\n  class: \"message-content\"\n};\nconst _hoisted_5 = {\n  key: 0\n};\nconst _hoisted_6 = {\n  key: 1\n};\nconst _hoisted_7 = {\n  class: \"input-area\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"div\", {\n    class: \"header\"\n  }, [_createElementVNode(\"h1\", null, \"BilgeBot Arama\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass(['message', message.sender])\n    }, [_createElementVNode(\"div\", _hoisted_4, [message.sender === 'user' ? (_openBlock(), _createElementBlock(\"strong\", _hoisted_5, \"Kullanıcı:\")) : _createCommentVNode(\"v-if\", true), message.sender === 'ai' ? (_openBlock(), _createElementBlock(\"strong\", _hoisted_6, \"AI:\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"span\", null, _toDisplayString(message.text), 1 /* TEXT */)])], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_7, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.query = $event),\n    type: \"text\",\n    placeholder: \"Aramak istediğin şeyi yaz...\",\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.performSearch && $options.performSearch(...args), [\"enter\"]))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.query]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.performSearch && $options.performSearch(...args)),\n    class: \"search-button\"\n  }, \"Ara\")])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_Fragment","_renderList","$data","messages","message","index","_normalizeClass","sender","_hoisted_4","_hoisted_5","_createCommentVNode","_hoisted_6","_toDisplayString","text","_hoisted_7","_cache","$event","query","type","placeholder","onKeyup","_withKeys","args","$options","performSearch","onClick"],"sources":["/Users/ed1p_/Desktop/HackAthon/frontend/src/components/SearchComponent.vue"],"sourcesContent":["<<template>\n  <div class=\"chat-container\">\n    <div class=\"header\">\n      <h1>BilgeBot Arama</h1>\n    </div>\n    <div class=\"chat-box\">\n      <div class=\"chat-history\">\n        <div v-for=\"(message, index) in messages\" :key=\"index\" :class=\"['message', message.sender]\">\n          <div class=\"message-content\">\n            <strong v-if=\"message.sender === 'user'\">Kullanıcı:</strong>\n            <strong v-if=\"message.sender === 'ai'\">AI:</strong>\n            <span>{{ message.text }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"input-area\">\n      <input v-model=\"query\" type=\"text\" placeholder=\"Aramak istediğin şeyi yaz...\" @keyup.enter=\"performSearch\" />\n      <button @click=\"performSearch\" class=\"search-button\">Ara</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      query: '',\n      messages: [], // Kullanıcı ve AI mesajlarını tutmak için bir dizi\n    };\n  },\n  methods: {\n    async performSearch() {\n      if (this.query.trim() === '') {\n        return; // Boş bir sorgu göndermeyelim\n      }\n\n      // Kullanıcının sorusunu sohbet geçmişine ekle\n      this.messages.push({ sender: 'user', text: this.query });\n\n      try {\n        // Backend'e POST isteği gönder\n        const response = await axios.post('http://localhost:8080/api/search', {\n          query: this.query,\n        });\n\n        // Dönen yanıtı kontrol ediyoruz\n        if (response && response.data && Array.isArray(response.data)) {\n          const aiResponse = response.data[0]; // AI'dan gelen ilk yanıt\n          console.log(\"Backend yanıtı:\", aiResponse);\n\n          // AI'nın yanıtını sohbet geçmişine ekle\n          this.messages.push({ sender: 'ai', text: aiResponse });\n        } else {\n          console.warn(\"Yanıt formatı beklenildiği gibi değil:\", response);\n        }\n\n        // Sorguyu temizle\n        this.query = '';\n      } catch (error) {\n        console.error('Hata oluştu:', error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Genel chat-container ayarları */\n.chat-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  width: 80%;\n  max-width: 800px;\n  margin: 20px auto;\n  background-color: #f9f9f9;\n  border-radius: 15px;\n  box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n  border: 1px solid #ddd;\n}\n\n/* Başlık stili */\n.header {\n  background-color: #4a90e2;\n  color: white;\n  text-align: center;\n  padding: 15px;\n  font-size: 1.8rem;\n}\n\n/* Sohbet geçmişi alanı */\n.chat-box {\n  height: 400px;\n  overflow-y: auto;\n  padding: 20px;\n  background-color: #fff;\n}\n\n/* Mesaj stili */\n.message {\n  margin-bottom: 15px;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  border-radius: 10px;\n  max-width: 70%;\n  word-wrap: break-word;\n}\n\n/* Kullanıcı ve AI mesajları için farklı renkler */\n.user {\n  align-self: flex-end;\n  background-color: #e0f7fa;\n  color: #00796b;\n}\n\n.ai {\n  align-self: flex-start;\n  background-color: #e3f2fd;\n  color: #0d47a1;\n}\n\n/* Mesaj içeriği */\n.message-content {\n  font-size: 1rem;\n}\n\n/* Giriş alanı */\n.input-area {\n  display: flex;\n  align-items: center;\n  padding: 15px;\n  background-color: #fafafa;\n  border-top: 1px solid #ddd;\n}\n\ninput {\n  flex: 1;\n  padding: 10px;\n  border-radius: 20px;\n  border: 1px solid #ccc;\n  font-size: 1rem;\n  margin-right: 10px;\n}\n\n.search-button {\n  background-color: #4a90e2;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 20px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: background-color 0.3s ease;\n}\n\n.search-button:hover {\n  background-color: #357ab7;\n}\n</style>\n>"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;EAIpBA,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAc;;EAEhBA,KAAK,EAAC;AAAiB;;EARtCC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAgBSD,KAAK,EAAC;AAAY;;uBAfzBE,mBAAA,CAmBM,OAnBNC,UAmBM,G,0BAlBJC,mBAAA,CAEM;IAFDJ,KAAK,EAAC;EAAQ,IACjBI,mBAAA,CAAuB,YAAnB,gBAAc,E,sBAEpBA,mBAAA,CAUM,OAVNC,UAUM,GATJD,mBAAA,CAQM,OARNE,UAQM,I,kBAPJJ,mBAAA,CAMMK,SAAA,QAbdC,WAAA,CAOwCC,KAAA,CAAAC,QAAQ,EAPhD,CAOqBC,OAAO,EAAEC,KAAK;yBAA3BV,mBAAA,CAMM;MANqCD,GAAG,EAAEW,KAAK;MAAGZ,KAAK,EAPrEa,eAAA,aAOmFF,OAAO,CAACG,MAAM;QACvFV,mBAAA,CAIM,OAJNW,UAIM,GAHUJ,OAAO,CAACG,MAAM,e,cAA5BZ,mBAAA,CAA4D,UATxEc,UAAA,EASqD,YAAU,KAT/DC,mBAAA,gBAU0BN,OAAO,CAACG,MAAM,a,cAA5BZ,mBAAA,CAAmD,UAV/DgB,UAAA,EAUmD,KAAG,KAVtDD,mBAAA,gBAWYb,mBAAA,CAA+B,cAAAe,gBAAA,CAAtBR,OAAO,CAACS,IAAI,iB;sCAK7BhB,mBAAA,CAGM,OAHNiB,UAGM,G,gBAFJjB,mBAAA,CAA6G;IAjBnH,uBAAAkB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAiBsBd,KAAA,CAAAe,KAAK,GAAAD,MAAA;IAAEE,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC,8BAA8B;IAAEC,OAAK,EAAAL,MAAA,QAAAA,MAAA,MAjB1FM,SAAA,KAAAC,IAAA,KAiBkGC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;iEAAzFpB,KAAA,CAAAe,KAAK,E,GACrBpB,mBAAA,CAAiE;IAAxD4B,OAAK,EAAAV,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;IAAE7B,KAAK,EAAC;KAAgB,KAAG,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}