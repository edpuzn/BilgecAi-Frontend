{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  class: \"chat-history\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"h1\", null, \"Gemini Arama\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.query = $event),\n    type: \"text\",\n    placeholder: \"Aramak istediğin şeyi yaz...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.query]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.performSearch && $options.performSearch(...args))\n  }, \"Ara\"), $data.messages.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[2] || (_cache[2] = _createElementVNode(\"h3\", null, \"Sohbet Geçmişi:\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass(message.sender)\n    }, [message.sender === 'user' ? (_openBlock(), _createElementBlock(\"strong\", _hoisted_3, \"Kullanıcı:\")) : _createCommentVNode(\"v-if\", true), message.sender === 'ai' ? (_openBlock(), _createElementBlock(\"strong\", _hoisted_4, \"AI:\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"span\", null, _toDisplayString(message.text), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","class","_createElementBlock","_createElementVNode","_cache","$event","$data","query","type","placeholder","onClick","args","$options","performSearch","messages","length","_hoisted_1","_hoisted_2","_Fragment","_renderList","message","index","_normalizeClass","sender","_hoisted_3","_createCommentVNode","_hoisted_4","_toDisplayString","text"],"sources":["/Users/ed1p_/Desktop/HackAthon/frontend/src/components/SearchComponent.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Gemini Arama</h1>\n    <input v-model=\"query\" type=\"text\" placeholder=\"Aramak istediğin şeyi yaz...\" />\n    <button @click=\"performSearch\">Ara</button>\n\n    <div v-if=\"messages.length\">\n      <h3>Sohbet Geçmişi:</h3>\n      <div class=\"chat-history\">\n        <div v-for=\"(message, index) in messages\" :key=\"index\" :class=\"message.sender\">\n          <strong v-if=\"message.sender === 'user'\">Kullanıcı:</strong>\n          <strong v-if=\"message.sender === 'ai'\">AI:</strong>\n          <span>{{ message.text }}</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      query: '',\n      messages: [], // Kullanıcı ve AI mesajlarını tutmak için bir dizi\n    };\n  },\n  methods: {\n    async performSearch() {\n      if (this.query.trim() === '') {\n        return; // Boş bir sorgu göndermeyelim\n      }\n\n      // Kullanıcının sorusunu sohbet geçmişine ekle\n      this.messages.push({ sender: 'user', text: this.query });\n\n      try {\n        // Backend'e POST isteği gönder\n        const response = await axios.post('http://localhost:8080/api/search', {\n          query: this.query,\n        });\n\n        // Dönen yanıtı kontrol ediyoruz\n        if (response && response.data && Array.isArray(response.data)) {\n          const aiResponse = response.data[0]; // AI'dan gelen ilk yanıt\n          console.log(\"Backend yanıtı:\", aiResponse);\n\n          // AI'nın yanıtını sohbet geçmişine ekle\n          this.messages.push({ sender: 'ai', text: aiResponse });\n        } else {\n          console.warn(\"Yanıt formatı beklenildiği gibi değil:\", response);\n        }\n\n        // Sorguyu temizle\n        this.query = '';\n      } catch (error) {\n        console.error('Hata oluştu:', error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Basit stil ayarları */\nh1 {\n  color: #2c3e50;\n}\n\ninput {\n  margin-right: 10px;\n}\n\nbutton {\n  margin-bottom: 10px;\n}\n\n.chat-history {\n  margin-top: 20px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  max-height: 400px;\n  overflow-y: auto;\n}\n\n.user {\n  color: #2c3e50;\n  margin-bottom: 5px;\n}\n\n.ai {\n  color: #3498db;\n  margin-bottom: 5px;\n}\n</style>\n"],"mappings":";;EAAAA,GAAA;AAAA;;EAQWC,KAAK,EAAC;AAAc;;EAR/BD,GAAA;AAAA;;EAAAA,GAAA;AAAA;;uBACEE,mBAAA,CAeM,c,0BAdJC,mBAAA,CAAqB,YAAjB,cAAY,sB,gBAChBA,mBAAA,CAAgF;IAHpF,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAGoBC,KAAA,CAAAC,KAAK,GAAAF,MAAA;IAAEG,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC;iDAA/BH,KAAA,CAAAC,KAAK,E,GACrBJ,mBAAA,CAA2C;IAAlCO,OAAK,EAAAN,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;KAAE,KAAG,GAEvBL,KAAA,CAAAQ,QAAQ,CAACC,MAAM,I,cAA1Bb,mBAAA,CASM,OAfVc,UAAA,G,0BAOMb,mBAAA,CAAwB,YAApB,iBAAe,sBACnBA,mBAAA,CAMM,OANNc,UAMM,I,kBALJf,mBAAA,CAIMgB,SAAA,QAbdC,WAAA,CASwCb,KAAA,CAAAQ,QAAQ,EAThD,CASqBM,OAAO,EAAEC,KAAK;yBAA3BnB,mBAAA,CAIM;MAJqCF,GAAG,EAAEqB,KAAK;MAAGpB,KAAK,EATrEqB,eAAA,CASuEF,OAAO,CAACG,MAAM;QAC7DH,OAAO,CAACG,MAAM,e,cAA5BrB,mBAAA,CAA4D,UAVtEsB,UAAA,EAUmD,YAAU,KAV7DC,mBAAA,gBAWwBL,OAAO,CAACG,MAAM,a,cAA5BrB,mBAAA,CAAmD,UAX7DwB,UAAA,EAWiD,KAAG,KAXpDD,mBAAA,gBAYUtB,mBAAA,CAA+B,cAAAwB,gBAAA,CAAtBP,OAAO,CAACQ,IAAI,iB;wCAZ/BH,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}