{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives } from \"vue\";\nimport _imports_0 from '@/assets/Bilgecan.png';\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-box\"\n};\nconst _hoisted_3 = {\n  class: \"chat-history\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"bot-avatar\"\n};\nconst _hoisted_5 = [\"innerHTML\"];\nconst _hoisted_6 = {\n  key: 1,\n  class: \"images\"\n};\nconst _hoisted_7 = [\"src\", \"alt\"];\nconst _hoisted_8 = {\n  class: \"image-caption\"\n};\nconst _hoisted_9 = {\n  class: \"input-area\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[4] || (_cache[4] = _createElementVNode(\"div\", {\n    class: \"header\"\n  }, [_createElementVNode(\"h1\", null, \"BilgecAI\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass(['message', message.sender])\n    }, [message.sender === 'ai' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [...(_cache[3] || (_cache[3] = [_createElementVNode(\"img\", {\n      src: _imports_0,\n      alt: \"BilgeBot Avatar\"\n    }, null, -1 /* HOISTED */)]))])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", {\n      class: \"message-content\",\n      innerHTML: $options.formatMessage(message.text)\n    }, null, 8 /* PROPS */, _hoisted_5), message.images && message.images.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(message.images, (image, imgIndex) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: imgIndex,\n        class: \"image-container\"\n      }, [_createElementVNode(\"img\", {\n        src: image.url,\n        alt: image.alt,\n        class: \"message-image\"\n      }, null, 8 /* PROPS */, _hoisted_7), _createElementVNode(\"p\", _hoisted_8, _toDisplayString(image.alt), 1 /* TEXT */)]);\n    }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_9, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.query = $event),\n    type: \"text\",\n    placeholder: \"Aramak istediğin şeyi yaz...\",\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.performSearch && $options.performSearch(...args), [\"enter\"]))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.query]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.performSearch && $options.performSearch(...args)),\n    class: \"search-button\"\n  }, \"Ara\")])]);\n}","map":{"version":3,"names":["_imports_0","class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_Fragment","_renderList","$data","messages","message","index","_normalizeClass","sender","_hoisted_4","_cache","src","alt","_createCommentVNode","innerHTML","$options","formatMessage","text","_hoisted_5","images","length","_hoisted_6","image","imgIndex","url","_hoisted_7","_hoisted_8","_toDisplayString","_hoisted_9","$event","query","type","placeholder","onKeyup","_withKeys","args","performSearch","onClick"],"sources":["C:\\Users\\msi\\Downloads\\Telegram Desktop\\HackAthon\\HackAthon\\frontend\\src\\components\\SearchComponent.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <div class=\"header\">\n      <h1>BilgecAI</h1>\n    </div>\n    <div class=\"chat-box\">\n      <div class=\"chat-history\">\n        <div v-for=\"(message, index) in messages\" :key=\"index\" :class=\"['message', message.sender]\">\n          <div v-if=\"message.sender === 'ai'\" class=\"bot-avatar\">\n            <img src=\"@/assets/Bilgecan.png\" alt=\"BilgeBot Avatar\" />\n          </div>\n          <div class=\"message-content\" v-html=\"formatMessage(message.text)\"></div>\n          <div v-if=\"message.images && message.images.length\" class=\"images\">\n            <div v-for=\"(image, imgIndex) in message.images\" :key=\"imgIndex\" class=\"image-container\">\n              <img :src=\"image.url\" :alt=\"image.alt\" class=\"message-image\" />\n              <p class=\"image-caption\">{{ image.alt }}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"input-area\">\n      <input v-model=\"query\" type=\"text\" placeholder=\"Aramak istediğin şeyi yaz...\" @keyup.enter=\"performSearch\" />\n      <button @click=\"performSearch\" class=\"search-button\">Ara</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { marked } from 'marked';\n\nexport default {\n  name: \"SearchComponent\",\n  data() {\n    return {\n      query: '',\n      messages: [],\n    };\n  },\n  created() {\n    this.addSuggestionFromQuery();\n  },\n\n  methods: {\n    addSuggestionFromQuery() {\n      const suggestion = this.$route.query.suggestion;\n      if (suggestion) {\n        this.messages.push({\n          sender: 'ai',\n          text: suggestion\n        });\n      }\n    },\n    async performSearch() {\n      if (this.query.trim() === '') {\n        return;\n      }\n      this.messages.push({ sender: 'user', text: this.query });\n      try {\n        const response = await axios.post('http://localhost:8080/api/search', {\n          query: this.query,\n        });\n        if (response && response.data && Array.isArray(response.data)) {\n          const aiResponse = response.data[0];\n          this.messages.push({\n            sender: 'ai',\n            text: aiResponse.text || aiResponse,\n            images: aiResponse.images || []\n          });\n        }\n        this.query = '';\n      } catch (error) {\n        console.error('Hata oluştu:', error);\n      }\n    },\n    formatMessage(text) {\n      return text ? marked(text) : '';\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Genel chat-container ayarları */\n.chat-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  width: 90%;\n  max-width: 900px;\n  margin: 30px auto;\n  background: linear-gradient(145deg, #ffffff, #e6e9f0);\n  border-radius: 25px;\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n  overflow: hidden;\n  border: 2px solid #4a90e2;\n  transition: all 0.3s ease-in-out;\n}\n\n/* Başlık stili */\n.header {\n  background: linear-gradient(to right, #4a90e2, #6a5acd);\n  color: #ffffff;\n  text-align: center;\n  padding: 25px;\n  font-size: 2.5rem;\n  font-weight: bold;\n  text-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n}\n\n/* Sohbet geçmişi alanı */\n.chat-box {\n  height: 500px;\n  overflow-y: auto;\n  padding: 30px;\n  background: #f0f4f8;\n  box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.1);\n  border-top: 1px solid #ddd;\n  border-bottom: 1px solid #ddd;\n}\n\n/* Mesaj stili */\n.message {\n  margin-bottom: 20px;\n  display: flex;\n  align-items: center;\n  padding: 15px;\n  border-radius: 20px;\n  max-width: 60%;\n  word-wrap: break-word;\n  transition: transform 0.3s, box-shadow 0.3s;\n}\n\n/* Kullanıcı ve AI mesajları için farklı renkler */\n.user {\n  align-self: flex-end;\n  background: #cdeffc;\n  color: #00796b;\n  box-shadow: 0 8px 25px rgba(0, 121, 107, 0.2);\n  margin-left: auto;\n}\n\n.ai {\n  align-self: flex-start;\n  background: #e1f5c4;\n  color: #33691e;\n  box-shadow: 0 8px 25px rgba(51, 105, 30, 0.2);\n  margin-right: auto;\n  display: flex;\n}\n\n.bot-avatar {\n  margin-right: 10px;\n}\n\n.bot-avatar img {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n}\n\n.message:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);\n}\n\n/* Mesaj içeriği */\n.message-content {\n  font-size: 1.1rem;\n  line-height: 1.6;\n}\n\n/* Görsel ve açıklama alanı */\n.images {\n  margin-top: 15px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.image-container {\n  margin-bottom: 15px;\n  border-radius: 15px;\n  overflow: hidden;\n}\n\n.message-image {\n  max-width: 100%;\n  border-radius: 15px;\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);\n}\n\n.image-caption {\n  font-size: 1rem;\n  color: #666;\n  margin-top: 8px;\n}\n\n/* Giriş alanı */\n.input-area {\n  display: flex;\n  align-items: center;\n  padding: 20px;\n  background: #f9fafc;\n  border-top: 1px solid #ddd;\n}\n\ninput {\n  flex: 1;\n  padding: 15px;\n  border-radius: 30px;\n  border: 2px solid #ccc;\n  font-size: 1.1rem;\n  margin-right: 15px;\n  transition: border-color 0.3s, box-shadow 0.3s;\n}\n\ninput:focus {\n  border-color: #4a90e2;\n  outline: none;\n  box-shadow: 0 0 15px rgba(74, 144, 226, 0.5);\n}\n\n.search-button {\n  background: linear-gradient(to right, #4a90e2, #6a5acd);\n  color: #ffffff;\n  border: none;\n  padding: 12px 30px;\n  border-radius: 30px;\n  cursor: pointer;\n  font-size: 1.2rem;\n  font-weight: bold;\n  transition: background 0.3s ease, transform 0.3s ease;\n}\n\n.search-button:hover {\n  background: linear-gradient(to right, #357ab7, #483d8b);\n  transform: translateY(-3px);\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);\n}\n</style>\n"],"mappings":";OASiBA,UAA2B;;EARrCC,KAAK,EAAC;AAAgB;;EAIpBA,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAc;;EAN/BC,GAAA;EAQ8CD,KAAK,EAAC;;mBARpD;;EAAAC,GAAA;EAY8DD,KAAK,EAAC;;mBAZpE;;EAeiBA,KAAK,EAAC;AAAe;;EAM7BA,KAAK,EAAC;AAAY;;uBApBzBE,mBAAA,CAwBM,OAxBNC,UAwBM,G,0BAvBJC,mBAAA,CAEM;IAFDJ,KAAK,EAAC;EAAQ,IACjBI,mBAAA,CAAiB,YAAb,UAAQ,E,sBAEdA,mBAAA,CAeM,OAfNC,UAeM,GAdJD,mBAAA,CAaM,OAbNE,UAaM,I,kBAZJJ,mBAAA,CAWMK,SAAA,QAlBdC,WAAA,CAOwCC,KAAA,CAAAC,QAAQ,EAPhD,CAOqBC,OAAO,EAAEC,KAAK;yBAA3BV,mBAAA,CAWM;MAXqCD,GAAG,EAAEW,KAAK;MAAGZ,KAAK,EAPrEa,eAAA,aAOmFF,OAAO,CAACG,MAAM;QAC5EH,OAAO,CAACG,MAAM,a,cAAzBZ,mBAAA,CAEM,OAFNa,UAEM,OAAAC,MAAA,QAAAA,MAAA,OADJZ,mBAAA,CAAyD;MAApDa,GAA2B,EAA3BlB,UAA2B;MAACmB,GAAG,EAAC;uCATjDC,mBAAA,gBAWUf,mBAAA,CAAwE;MAAnEJ,KAAK,EAAC,iBAAiB;MAACoB,SAAoC,EAA5BC,QAAA,CAAAC,aAAa,CAACX,OAAO,CAACY,IAAI;4BAXzEC,UAAA,GAYqBb,OAAO,CAACc,MAAM,IAAId,OAAO,CAACc,MAAM,CAACC,MAAM,I,cAAlDxB,mBAAA,CAKM,OALNyB,UAKM,I,kBAJJzB,mBAAA,CAGMK,SAAA,QAhBlBC,WAAA,CAa6CG,OAAO,CAACc,MAAM,EAb3D,CAayBG,KAAK,EAAEC,QAAQ;2BAA5B3B,mBAAA,CAGM;QAH4CD,GAAG,EAAE4B,QAAQ;QAAE7B,KAAK,EAAC;UACrEI,mBAAA,CAA+D;QAAzDa,GAAG,EAAEW,KAAK,CAACE,GAAG;QAAGZ,GAAG,EAAEU,KAAK,CAACV,GAAG;QAAElB,KAAK,EAAC;8BAd3D+B,UAAA,GAec3B,mBAAA,CAA4C,KAA5C4B,UAA4C,EAAAC,gBAAA,CAAhBL,KAAK,CAACV,GAAG,iB;wCAfnDC,mBAAA,e;sCAqBIf,mBAAA,CAGM,OAHN8B,UAGM,G,gBAFJ9B,mBAAA,CAA6G;IAtBnH,uBAAAY,MAAA,QAAAA,MAAA,MAAAmB,MAAA,IAsBsB1B,KAAA,CAAA2B,KAAK,GAAAD,MAAA;IAAEE,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC,8BAA8B;IAAEC,OAAK,EAAAvB,MAAA,QAAAA,MAAA,MAtB1FwB,SAAA,KAAAC,IAAA,KAsBkGpB,QAAA,CAAAqB,aAAA,IAAArB,QAAA,CAAAqB,aAAA,IAAAD,IAAA,CAAa;iEAAzFhC,KAAA,CAAA2B,KAAK,E,GACrBhC,mBAAA,CAAiE;IAAxDuC,OAAK,EAAA3B,MAAA,QAAAA,MAAA,UAAAyB,IAAA,KAAEpB,QAAA,CAAAqB,aAAA,IAAArB,QAAA,CAAAqB,aAAA,IAAAD,IAAA,CAAa;IAAEzC,KAAK,EAAC;KAAgB,KAAG,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}