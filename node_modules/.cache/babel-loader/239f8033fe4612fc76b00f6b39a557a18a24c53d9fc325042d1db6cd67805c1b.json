{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { marked } from 'marked';\nexport default {\n  name: \"SearchComponent\",\n  data() {\n    return {\n      query: '',\n      messages: []\n    };\n  },\n  created() {\n    this.addSuggestionFromQuery();\n  },\n  methods: {\n    addSuggestionFromQuery() {\n      const suggestion = this.$route.query.suggestion;\n      if (suggestion) {\n        this.messages.push({\n          sender: 'ai',\n          text: suggestion\n        });\n      }\n    },\n    async performSearch() {\n      if (this.query.trim() === '') {\n        return;\n      }\n      this.messages.push({\n        sender: 'user',\n        text: this.query\n      });\n      try {\n        const response = await axios.post('http://localhost:8080/api/search', {\n          query: this.query\n        });\n        if (response && response.data && Array.isArray(response.data)) {\n          const aiResponse = response.data[0];\n          this.messages.push({\n            sender: 'ai',\n            text: aiResponse.text || aiResponse,\n            images: aiResponse.images || []\n          });\n        }\n        this.query = '';\n      } catch (error) {\n        console.error('Hata oluştu:', error);\n      }\n    },\n    formatMessage(text) {\n      return text ? marked(text) : '';\n    }\n  }\n};","map":{"version":3,"names":["axios","marked","name","data","query","messages","created","addSuggestionFromQuery","methods","suggestion","$route","push","sender","text","performSearch","trim","response","post","Array","isArray","aiResponse","images","error","console","formatMessage"],"sources":["C:\\Users\\msi\\Downloads\\Telegram Desktop\\HackAthon\\HackAthon\\frontend\\src\\components\\SearchComponent.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <div class=\"header\">\n      <h1>BilgeBot</h1>\n    </div>\n    <div class=\"chat-box\">\n      <div class=\"chat-history\">\n        <div v-for=\"(message, index) in messages\" :key=\"index\" :class=\"['message', message.sender]\">\n          <div class=\"message-content\" v-html=\"formatMessage(message.text)\"></div>\n          <div v-if=\"message.images && message.images.length\" class=\"images\">\n            <div v-for=\"(image, imgIndex) in message.images\" :key=\"imgIndex\" class=\"image-container\">\n              <img :src=\"image.url\" :alt=\"image.alt\" class=\"message-image\" />\n              <p class=\"image-caption\">{{ image.alt }}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"input-area\">\n      <input v-model=\"query\" type=\"text\" placeholder=\"Aramak istediğin şeyi yaz...\" @keyup.enter=\"performSearch\" />\n      <button @click=\"performSearch\" class=\"search-button\">Ara</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { marked } from 'marked';\n\nexport default {\n  name: \"SearchComponent\",\n  data() {\n    return {\n      query: '',\n      messages: [],\n    };\n  },\n  created() {\n    this.addSuggestionFromQuery();\n  },\n\n  methods: {\n    addSuggestionFromQuery() {\n      const suggestion = this.$route.query.suggestion;\n      if (suggestion) {\n        this.messages.push({\n          sender: 'ai',\n          text: suggestion\n        });\n      }\n    },\n    async performSearch() {\n      if (this.query.trim() === '') {\n        return;\n      }\n      this.messages.push({ sender: 'user', text: this.query });\n      try {\n        const response = await axios.post('http://localhost:8080/api/search', {\n          query: this.query,\n        });\n        if (response && response.data && Array.isArray(response.data)) {\n          const aiResponse = response.data[0];\n          this.messages.push({\n            sender: 'ai',\n            text: aiResponse.text || aiResponse,\n            images: aiResponse.images || []\n          });\n        }\n        this.query = '';\n      } catch (error) {\n        console.error('Hata oluştu:', error);\n      }\n    },\n    formatMessage(text) {\n      return text ? marked(text) : '';\n    },\n  },\n};\n</script>\n\n\n<style scoped>\n/* Genel chat-container ayarları */\n.chat-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  width: 80%;\n  max-width: 800px;\n  margin: 20px auto;\n  background-color: #f9f9f9;\n  border-radius: 15px;\n  box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n  border: 1px solid #ddd;\n}\n\n/* Başlık stili */\n.header {\n  background-color: #4a90e2;\n  color: white;\n  text-align: center;\n  padding: 15px;\n  font-size: 1.8rem;\n}\n\n/* Sohbet geçmişi alanı */\n.chat-box {\n  height: 400px;\n  overflow-y: auto;\n  padding: 20px;\n  background-color: #fff;\n}\n\n/* Mesaj stili */\n.message {\n  margin-bottom: 15px;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  border-radius: 10px;\n  max-width: 70%;\n  word-wrap: break-word;\n}\n\n/* Kullanıcı ve AI mesajları için farklı renkler */\n.user {\n  align-self: flex-end;\n  background-color: #e0f7fa;\n  color: #00796b;\n}\n\n.ai {\n  align-self: flex-start;\n  background-color: #e3f2fd;\n  color: #0d47a1;\n}\n\n/* Mesaj içeriği */\n.message-content {\n  font-size: 1rem;\n}\n\n/* Görsel ve açıklama alanı */\n.images {\n  margin-top: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.image-container {\n  margin-bottom: 10px;\n}\n\n.message-image {\n  max-width: 100%;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n}\n\n.image-caption {\n  font-size: 0.9rem;\n  color: #666;\n  margin-top: 5px;\n}\n\n/* Giriş alanı */\n.input-area {\n  display: flex;\n  align-items: center;\n  padding: 15px;\n  background-color: #fafafa;\n  border-top: 1px solid #ddd;\n}\n\ninput {\n  flex: 1;\n  padding: 15px;\n  border-radius: 20px;\n  border: 1px solid #ccc;\n  font-size: 1rem;\n  margin-right: 10px;\n}\n\n.search-button {\n  background-color: #4a90e2;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 20px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: background-color 0.3s ease;\n}\n\n.search-button:hover {\n  background-color: #357ab7;\n}\n</style>"],"mappings":";AA0BA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,MAAK,QAAS,QAAQ;AAE/B,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,sBAAsB,CAAC,CAAC;EAC/B,CAAC;EAEDC,OAAO,EAAE;IACPD,sBAAsBA,CAAA,EAAG;MACvB,MAAME,UAAS,GAAI,IAAI,CAACC,MAAM,CAACN,KAAK,CAACK,UAAU;MAC/C,IAAIA,UAAU,EAAE;QACd,IAAI,CAACJ,QAAQ,CAACM,IAAI,CAAC;UACjBC,MAAM,EAAE,IAAI;UACZC,IAAI,EAAEJ;QACR,CAAC,CAAC;MACJ;IACF,CAAC;IACD,MAAMK,aAAaA,CAAA,EAAG;MACpB,IAAI,IAAI,CAACV,KAAK,CAACW,IAAI,CAAC,MAAM,EAAE,EAAE;QAC5B;MACF;MACA,IAAI,CAACV,QAAQ,CAACM,IAAI,CAAC;QAAEC,MAAM,EAAE,MAAM;QAAEC,IAAI,EAAE,IAAI,CAACT;MAAM,CAAC,CAAC;MACxD,IAAI;QACF,MAAMY,QAAO,GAAI,MAAMhB,KAAK,CAACiB,IAAI,CAAC,kCAAkC,EAAE;UACpEb,KAAK,EAAE,IAAI,CAACA;QACd,CAAC,CAAC;QACF,IAAIY,QAAO,IAAKA,QAAQ,CAACb,IAAG,IAAKe,KAAK,CAACC,OAAO,CAACH,QAAQ,CAACb,IAAI,CAAC,EAAE;UAC7D,MAAMiB,UAAS,GAAIJ,QAAQ,CAACb,IAAI,CAAC,CAAC,CAAC;UACnC,IAAI,CAACE,QAAQ,CAACM,IAAI,CAAC;YACjBC,MAAM,EAAE,IAAI;YACZC,IAAI,EAAEO,UAAU,CAACP,IAAG,IAAKO,UAAU;YACnCC,MAAM,EAAED,UAAU,CAACC,MAAK,IAAK;UAC/B,CAAC,CAAC;QACJ;QACA,IAAI,CAACjB,KAAI,GAAI,EAAE;MACjB,EAAE,OAAOkB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACtC;IACF,CAAC;IACDE,aAAaA,CAACX,IAAI,EAAE;MAClB,OAAOA,IAAG,GAAIZ,MAAM,CAACY,IAAI,IAAI,EAAE;IACjC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}