{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"h1\", null, \"Gemini Arama\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.query = $event),\n    type: \"text\",\n    placeholder: \"Aramak istediğin şeyi yaz...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.query]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.performSearch && $options.performSearch(...args))\n  }, \"Ara\"), $data.results && $data.results.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[2] || (_cache[2] = _createElementVNode(\"h3\", null, \"Sonuçlar:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.results, (result, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, _toDisplayString(result), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","_cache","$event","$data","query","type","placeholder","onClick","args","$options","performSearch","results","length","_hoisted_1","_Fragment","_renderList","result","index","_toDisplayString","_createCommentVNode"],"sources":["/Users/ed1p_/Desktop/HackAthon/frontend/src/components/SearchComponent.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Gemini Arama</h1>\n    <input v-model=\"query\" type=\"text\" placeholder=\"Aramak istediğin şeyi yaz...\"/>\n    <button @click=\"performSearch\">Ara</button>\n    <div v-if=\"results && results.length\">\n      <h3>Sonuçlar:</h3>\n      <ul>\n        <li v-for=\"(result, index) in results\" :key=\"index\">{{ result }}</li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport api from '../api';\n\nexport default {\n  data() {\n    return {\n      query: '',\n      results: [],\n    };\n  },\n  methods: {\n    async performSearch() {\n      try {\n        // Backend'e istek gönder\n        const response = await api.search(this.query);\n\n        // Backend'ten dönen yanıtı işleyelim\n        if (response && response.data && response.data.results) {\n          this.results = response.data.data(); // JSON yanıtında \"results\" varsa onu kullan\n        } else {\n          this.results = []; // Eğer yanıt yoksa boş bırak\n        }\n      } catch (error) {\n        console.error('Hata oluştu:', error);\n        this.results = []; // Hata durumunda boş dizi ayarla ki frontend bu durumda bozulmasın\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Basit stil ayarları */\nh1 {\n  color: #2c3e50;\n}\n\ninput {\n  margin-right: 10px;\n}\n</style>\n"],"mappings":";;EAAAA,GAAA;AAAA;;uBACEC,mBAAA,CAUM,c,0BATJC,mBAAA,CAAqB,YAAjB,cAAY,sB,gBAChBA,mBAAA,CAA+E;IAHnF,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAGoBC,KAAA,CAAAC,KAAK,GAAAF,MAAA;IAAEG,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC;iDAA/BH,KAAA,CAAAC,KAAK,E,GACrBJ,mBAAA,CAA2C;IAAlCO,OAAK,EAAAN,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;KAAE,KAAG,GACvBL,KAAA,CAAAQ,OAAO,IAAIR,KAAA,CAAAQ,OAAO,CAACC,MAAM,I,cAApCb,mBAAA,CAKM,OAVVc,UAAA,G,0BAMMb,mBAAA,CAAkB,YAAd,WAAS,sBACbA,mBAAA,CAEK,c,kBADHD,mBAAA,CAAqEe,SAAA,QAR7EC,WAAA,CAQsCZ,KAAA,CAAAQ,OAAO,EAR7C,CAQoBK,MAAM,EAAEC,KAAK;yBAAzBlB,mBAAA,CAAqE;MAA7BD,GAAG,EAAEmB;IAAK,GAAAC,gBAAA,CAAKF,MAAM;wCARrEG,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}